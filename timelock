#!/usr/bin/env ruby

require 'openssl'
require 'base64'
require 'yaml'
require 'optparse'
require 'benchmark'

class TimelockPuzzle
  def self.encrypt(plaintext, t)
    cipher = OpenSSL::Cipher::AES.new(128, :CFB)
    cipher.encrypt
    keystring = cipher.random_key
    key = hexstring_to_int(keystring)

    p       = OpenSSL::BN.generate_prime(128)
    q       = OpenSSL::BN.generate_prime(128)
    n       = p*q
    a       = OpenSSL::BN.new((Random.rand(n-2)+2).to_s)  # random in range 1 < a < n
    totient = (p-1)*(q-1)
    e       = OpenSSL::BN.new("2").mod_exp(OpenSSL::BN.new(t.to_s), totient)

    key %= n

    b = OpenSSL::BN.new(a.to_s).mod_exp(e, n)
    ck = (key + b) % n

    cipher.key = int_to_hexstring(key % n)
    cm = cipher.update(plaintext) + cipher.final

    yaml = {  "n"  => "0x%x" % n,
              "t"  => "0x%x" % t,
              "a"  => "0x%x" % a,
              "ck" => "0x%x" % ck,
              "cm" => Base64.encode64(cm) }
    return YAML.dump(yaml)
  end

  def self.decrypt(yaml)
    hash = YAML.load(yaml)
    n  = hash["n"].hex
    t  = hash["t"].hex
    a  = hash["a"].hex
    ck = hash["ck"].hex
    cm = Base64.decode64(hash["cm"])
    b  = OpenSSL::BN.new(a.to_s).mod_exp(2**t, n)
    k  = int_to_hexstring(ck - b)

    cipher = OpenSSL::Cipher::AES.new(128, :CFB)
    cipher.decrypt
    cipher.key = k
    plaintext = cipher.update(cm) + cipher.final
    return plaintext
  end

  def self.benchmark(iter = 25)
    t0 = Time.now
    # these arbitrary values don't actually affect results that much
    OpenSSL::BN.new("7324129").mod_exp(2**iter, 83289)
    tf = Time.now
    return iter/(tf-t0) # squarings per second
  end

  def self.hexstring_to_int(str)
    return str.unpack("H*")[0].hex
  end
  
  def self.int_to_hexstring(int)
    return ["%x" % int].pack("H*")
  end
  
  def self.correct_time(time)
    #return time
    return (Math.sqrt(35200000*time + 63505209) - 5717) / 1760
  end
end


usage = <<EOS
usage: timelock <command> [<args>]
Available commands are:
  encrypt     Create a new timelock puzzle
  decrypt     Solve an existing timelock puzzle
  benchmark   Determine solve speed on this machine
EOS

usage_encrypt = <<EOS
usage: timelock encrypt -t <time> [options]
Options are:
  -s, --speed
    Specify how many squarings per second the target can perform. If this
    argument is omitted, the local machine will be benchmarked to determine
    this value.
  -f file
    Read the plaintext from the specified file rather than standard input.
  -o file
    Write the timelock puzzle to a file rather than standard output.
EOS

usage_decrypt = <<EOS
usage: timelock decrypt <time> [options]
Options are:
  -f file
    Read the timelock puzzle from the specified file rather than standard
    input.
  -o file
    Write the decrypted plaintext to a file rather than standard output.
EOS

def encrypt_parser(args)
  options = { :in => STDIN, :out => STDOUT, :speed => nil, :time => 10 }
  p = OptionParser.new do |opts|
    opts.on("-t <time>", "--time <time>", Float) do |t|
      options[:time] = t
    end
    opts.on("-s <speed>", "--speed <speed>", Float) do |s|
      options[:speed] = s
    end
    opts.on("-f <file>", String) do |input|
      options[:in] = File.open(input, "r")
    end
    opts.on("-o <file>", String) do |output|
      options[:out] = File.open(output, "w")
    end
    if options[:speed].nil?
      options[:speed] = TimelockPuzzle.benchmark()
    end
  end
  p.parse!(args)
  options
end

def decrypt_parser(args)
  options = { :in => STDIN, :out => STDOUT }
  p = OptionParser.new do |opts|
    opts.on("-f <file>", String) do |input|
      options[:in] = File.open(input, "r")
    end
    opts.on("-o <file>", String) do |output|
      options[:out] = File.open(output, "w")
    end
    if options[:speed].nil?
      options[:speed] = TimelockPuzzle.benchmark()
    end
  end
  p.parse!(args)
  options
end

def get_contents(input)
  if input.is_a?(IO)
    input.read
  else
    IO.read(input)
  end
end

if ARGV.empty?
  puts usage
else
  args = ARGV.drop(1)
  case ARGV[0]
  when "encrypt"
    if args.empty?
      puts usage_encrypt
      exit
    end
    opts = encrypt_parser(args)
    t = (TimelockPuzzle.correct_time(opts[:time]) * opts[:speed]).to_i
    opts[:out].puts TimelockPuzzle.encrypt(get_contents(opts[:in]), t)
  when "decrypt"
    opts = decrypt_parser(args)
    opts[:out].puts TimelockPuzzle.decrypt(get_contents(opts[:in]))
  when "benchmark"
    puts TimelockPuzzle.benchmark()
  else
    puts usage
  end
end


